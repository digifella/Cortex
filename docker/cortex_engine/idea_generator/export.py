# ## File: cortex_engine/idea_generator/export.py
# Version: 1.0.0
# Date: 2025-08-08
# Purpose: Results export functionality - extracted from monolithic module

import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any

from ..utils.logging_utils import get_logger

logger = get_logger(__name__)

class IdeaExporter:
    """
    Handles exporting idea generation results to various formats.
    
    Supported formats:
    - Markdown reports
    - JSON data files
    - Summary documents
    """
    
    def __init__(self):
        """Initialize the exporter."""
        pass
    
    def export_results(self, phase_results: Dict[str, Any], 
                      output_dir: str, filename_prefix: str = "idea_session") -> Dict[str, str]:
        """
        Export idea generation results to files.
        
        Args:
            phase_results: Results from all phases
            output_dir: Directory to save files
            filename_prefix: Prefix for generated filenames
            
        Returns:
            Dict mapping export type to file path
        """
        try:
            output_path = Path(output_dir)
            output_path.mkdir(parents=True, exist_ok=True)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            exported_files = {}
            
            # Export as JSON
            json_file = output_path / f"{filename_prefix}_{timestamp}.json"
            exported_files["json"] = str(json_file)
            
            with open(json_file, 'w', encoding='utf-8') as f:
                json.dump(phase_results, f, indent=2, default=str)
            
            # Export as Markdown report
            md_file = output_path / f"{filename_prefix}_{timestamp}.md"
            exported_files["markdown"] = str(md_file)
            
            markdown_content = self._generate_markdown_report(phase_results)
            with open(md_file, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
            
            # Export summary
            summary_file = output_path / f"{filename_prefix}_summary_{timestamp}.txt"
            exported_files["summary"] = str(summary_file)
            
            summary_content = self._generate_summary(phase_results)
            with open(summary_file, 'w', encoding='utf-8') as f:
                f.write(summary_content)
            
            logger.info(f"Exported idea session results to {len(exported_files)} files")
            return exported_files
            
        except Exception as e:
            logger.error(f"Export failed: {e}")
            return {"error": str(e)}
    
    def _generate_markdown_report(self, results: Dict[str, Any]) -> str:
        """Generate a formatted Markdown report."""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        report = f"""# Idea Generation Session Report

**Generated:** {timestamp}  
**Collection:** {results.get('collection', 'Unknown')}

## Session Overview

This report documents an idea generation session using the Double Diamond methodology.

### Phases Completed

"""
        
        # Add phase summaries
        phases = ["discovery", "define", "develop", "deliver"]
        for phase in phases:
            if phase in results:
                report += f"- ✅ **{phase.title()}**: {results[phase].get('status', 'unknown')}\n"
            else:
                report += f"- ⏸️ **{phase.title()}**: Not completed\n"
        
        report += "\n## Detailed Results\n\n"
        
        # Add detailed phase results
        for phase_name, phase_data in results.items():
            if isinstance(phase_data, dict) and "status" in phase_data:
                report += f"### {phase_name.title()} Phase\n\n"
                report += f"**Status:** {phase_data.get('status', 'unknown')}\n\n"
                
                if phase_data.get("status") == "success":
                    # Add phase-specific content
                    if phase_name == "discovery":
                        report += self._format_discovery_results(phase_data)
                    elif phase_name == "define":
                        report += self._format_define_results(phase_data)
                    elif phase_name == "develop":
                        report += self._format_develop_results(phase_data)
                    elif phase_name == "deliver":
                        report += self._format_deliver_results(phase_data)
                else:
                    report += f"**Error:** {phase_data.get('error', 'Unknown error')}\n\n"
        
        report += "\n---\n\n*Report generated by Cortex Suite Idea Generator*\n"
        return report
    
    def _format_discovery_results(self, data: Dict[str, Any]) -> str:
        """Format discovery phase results for Markdown."""
        content = ""
        
        if "themes" in data:
            content += f"**Themes Identified:** {len(data['themes'])}\n\n"
        
        if "opportunities" in data:
            content += f"**Opportunities Found:** {len(data['opportunities'])}\n\n"
        
        if "filters_applied" in data and data["filters_applied"]:
            content += "**Filters Applied:**\n"
            for key, value in data["filters_applied"].items():
                content += f"- {key}: {value}\n"
            content += "\n"
        
        return content
    
    def _format_define_results(self, data: Dict[str, Any]) -> str:
        """Format define phase results for Markdown."""
        content = ""
        
        if "problem_statements" in data:
            content += f"**Problem Statements:** {len(data['problem_statements'])}\n\n"
        
        if "focus_themes" in data:
            content += "**Focus Themes:**\n"
            for theme in data["focus_themes"]:
                content += f"- {theme}\n"
            content += "\n"
        
        return content
    
    def _format_develop_results(self, data: Dict[str, Any]) -> str:
        """Format develop phase results for Markdown."""
        content = ""
        
        if "solutions" in data:
            content += f"**Solutions Generated:** {len(data['solutions'])}\n\n"
            
            for i, solution in enumerate(data["solutions"], 1):
                content += f"#### Solution {i}: {solution.get('solution_title', 'Untitled')}\n\n"
                content += f"**Agent:** {solution.get('agent', 'Unknown')}\n"
                content += f"**Feasibility:** {solution.get('feasibility', 'Unknown')}\n"
                content += f"**Impact:** {solution.get('impact', 'Unknown')}\n\n"
                content += f"{solution.get('description', 'No description available')}\n\n"
        
        if "innovation_approach" in data:
            content += f"**Innovation Approach:** {data['innovation_approach']}\n\n"
        
        return content
    
    def _format_deliver_results(self, data: Dict[str, Any]) -> str:
        """Format deliver phase results for Markdown."""
        content = ""
        
        if "implementation_focus" in data:
            content += f"**Implementation Focus:** {data['implementation_focus']}\n\n"
        
        if "refined_solutions" in data:
            content += f"**Refined Solutions:** {len(data['refined_solutions'])}\n\n"
        
        return content
    
    def _generate_summary(self, results: Dict[str, Any]) -> str:
        """Generate a concise summary of results."""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        summary = f"IDEA GENERATION SESSION SUMMARY\n"
        summary += f"Generated: {timestamp}\n"
        summary += f"Collection: {results.get('collection', 'Unknown')}\n\n"
        
        # Count completed phases
        completed_phases = sum(1 for key, value in results.items() 
                             if isinstance(value, dict) and value.get('status') == 'success')
        
        summary += f"Phases Completed: {completed_phases}/4\n\n"
        
        # Add key metrics
        if "develop" in results and results["develop"].get("status") == "success":
            solutions_count = len(results["develop"].get("solutions", []))
            summary += f"Solutions Generated: {solutions_count}\n"
        
        if "discovery" in results and results["discovery"].get("status") == "success":
            themes_count = len(results["discovery"].get("themes", []))
            summary += f"Themes Identified: {themes_count}\n"
        
        summary += f"\nSession completed successfully.\n"
        return summary