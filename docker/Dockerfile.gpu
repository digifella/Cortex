# Dockerfile for Cortex Suite - GPU-Enabled Version
# Requires: NVIDIA Docker runtime and CUDA 12.1+ compatible GPU
FROM nvidia/cuda:12.1.0-runtime-ubuntu22.04

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV DEBIAN_FRONTEND=noninteractive
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility

# Install Python 3.11 and system dependencies
RUN apt-get update && apt-get install -y \
    python3.11 \
    python3.11-dev \
    python3-pip \
    graphviz \
    graphviz-dev \
    gcc \
    g++ \
    curl \
    git \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Set Python 3.11 as default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1

# Create app user
RUN useradd --create-home --shell /bin/bash cortex

# Install Ollama and give cortex user access
RUN curl -fsSL https://ollama.ai/install.sh | sh && \
    chown -R cortex:cortex /usr/local/bin/ollama /usr/bin/ollama 2>/dev/null || true && \
    mkdir -p /home/cortex/.ollama && \
    chown -R cortex:cortex /home/cortex/.ollama

USER cortex
WORKDIR /home/cortex/app

# Copy requirements
COPY --chown=cortex:cortex requirements.txt ./requirements.txt

# Install base requirements WITHOUT torch and spacy model (installed separately)
# Increased timeout to 300 seconds for slow/unstable network connections
RUN --mount=type=cache,target=/home/cortex/.cache/pip \
    grep -v "^torch" requirements.txt | grep -v "^en-core-web-sm" > requirements-base.txt && \
    pip install --retries 5 --timeout 300 -r requirements-base.txt

# Install CUDA-enabled PyTorch
# PyTorch CUDA wheels are large (~2GB), need extended timeout
RUN --mount=type=cache,target=/home/cortex/.cache/pip \
    pip install --retries 5 --timeout 300 torch==2.3.1+cu121 torchvision==0.18.1+cu121 \
    --extra-index-url https://download.pytorch.org/whl/cu121

# Verify GPU installation
RUN python -c "import torch; print(f'PyTorch version: {torch.__version__}'); print(f'CUDA available: {torch.cuda.is_available()}'); print(f'CUDA version: {torch.version.cuda if torch.cuda.is_available() else \"N/A\"}')"

# Add user's local bin to PATH
ENV PATH="/home/cortex/.local/bin:$PATH"

# Download spaCy model
RUN python -m spacy download en_core_web_sm

# Download NLTK data
RUN python -c "import nltk; nltk.download('averaged_perceptron_tagger'); nltk.download('punkt'); nltk.download('punkt_tab'); nltk.download('stopwords'); nltk.download('wordnet'); nltk.download('omw-1.4')"

# Install Docling with NumPy constraints
RUN pip install 'docling>=1.0.0' 'numpy>=1.26.4,<2.0.0' || echo "Docling installation failed, will use legacy readers"

# Copy application code
COPY --chown=cortex:cortex . .

# Create data directories
RUN mkdir -p /home/cortex/data/ai_databases \
    /home/cortex/data/knowledge_base \
    /home/cortex/logs \
    /home/cortex/app/logs

# Set default environment variables
ENV AI_DATABASE_PATH=/home/cortex/data/ai_databases
ENV KNOWLEDGE_SOURCE_PATH=/home/cortex/data/knowledge_base
ENV GRAPHVIZ_DOT_EXECUTABLE=/usr/bin/dot
ENV LLM_PROVIDER=ollama
ENV OLLAMA_MODEL=mistral:latest
ENV OLLAMA_HOST=0.0.0.0:11434
ENV OLLAMA_ORIGINS=*

# Expose ports
EXPOSE 8501 8000

# Create startup script
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "🚀 Starting Cortex Suite (GPU-Enabled)"\n\
python -c "from cortex_engine.version_config import VERSION_DISPLAY; print(f\\\"📦 Version: {VERSION_DISPLAY}\\\")"\n\
echo "📅 $(date)"\n\
echo "💻 Platform: $(uname -m) ($(uname -s))"\n\
echo "🐳 Docker Environment: $([ -f /.dockerenv ] && echo "Yes" || echo "No")"\n\
echo "🎮 GPU Support: CUDA-Enabled"\n\
echo ""\n\
\n\
# Verify GPU access\n\
echo "🔍 Checking GPU availability..."\n\
python -c "import torch; print(f\\\"CUDA available: {torch.cuda.is_available()}\\\"); print(f\\\"GPU count: {torch.cuda.device_count() if torch.cuda.is_available() else 0}\\\")"\n\
echo ""\n\
\n\
# Start Ollama service in background\n\
echo "🤖 Starting Ollama service..."\n\
export OLLAMA_HOST=0.0.0.0:11434\n\
export OLLAMA_ORIGINS=*\n\
ollama serve &\n\
OLLAMA_PID=$!\n\
\n\
# Wait for Ollama to be ready\n\
echo "⏳ Waiting for Ollama to initialize..."\n\
for i in {1..60}; do\n\
    if curl -s http://localhost:11434/api/tags >/dev/null 2>&1; then\n\
        echo "✅ Ollama is ready!"\n\
        break\n\
    fi\n\
    if [ $i -eq 60 ]; then\n\
        echo "⚠️ Ollama taking longer than expected, continuing..."\n\
        break\n\
    fi\n\
    echo "   ... attempt $i/60"\n\
    sleep 3\n\
done\n\
\n\
# Start API server\n\
echo "🔗 Starting API server..."\n\
uvicorn api.main:app --host 0.0.0.0 --port 8000 --workers 1 &\n\
API_PID=$!\n\
\n\
# Start Streamlit app\n\
echo "🖥️ Starting Streamlit UI..."\n\
streamlit run Cortex_Suite.py --server.port 8501 --server.address 0.0.0.0 --server.enableCORS false --server.enableXsrfProtection false &\n\
STREAMLIT_PID=$!\n\
\n\
# Wait for services\n\
echo "⏳ Waiting for services to start..."\n\
sleep 10\n\
\n\
echo ""\n\
echo "🎉 Cortex Suite (GPU-Enabled) is now accessible!"\n\
echo "🌐 Access at: http://localhost:8501"\n\
echo "🔗 API docs: http://localhost:8000/docs"\n\
echo "🎮 GPU Acceleration: ENABLED"\n\
echo ""\n\
\n\
# Download models in background\n\
{\n\
    echo "📦 Starting AI model downloads..."\n\
    if ! ollama list 2>/dev/null | grep -q "mistral:latest"; then\n\
        echo "⬇️ Downloading Mistral model (4.4GB)..."\n\
        ollama pull mistral:latest\n\
        echo "✅ Mistral model ready!"\n\
    fi\n\
    \n\
    if ! ollama list 2>/dev/null | grep -q "mistral-small3.2"; then\n\
        echo "⬇️ Downloading Mistral Small model (15GB)..."\n\
        ollama pull mistral-small3.2\n\
        echo "✅ Mistral Small model ready!"\n\
    fi\n\
    \n\
    echo "🎯 All AI models are now ready!"\n\
    echo "🚀 Full functionality (with GPU) is now available at http://localhost:8501"\n\
} &\n\
MODEL_DOWNLOAD_PID=$!\n\
\n\
# Shutdown handler\n\
cleanup() {\n\
    echo ""\n\
    echo "🛑 Shutting down Cortex Suite..."\n\
    kill $OLLAMA_PID $API_PID $STREAMLIT_PID $MODEL_DOWNLOAD_PID 2>/dev/null || true\n\
    echo "✅ Shutdown complete"\n\
    exit 0\n\
}\n\
\n\
trap cleanup SIGTERM SIGINT\n\
\n\
# Keep container running\n\
while true; do\n\
    if ! kill -0 $STREAMLIT_PID 2>/dev/null; then\n\
        echo "❌ Streamlit process died, restarting..."\n\
        streamlit run Cortex_Suite.py --server.port 8501 --server.address 0.0.0.0 --server.enableCORS false --server.enableXsrfProtection false &\n\
        STREAMLIT_PID=$!\n\
    fi\n\
    \n\
    if ! kill -0 $API_PID 2>/dev/null; then\n\
        echo "❌ API process died, restarting..."\n\
        uvicorn api.main:app --host 0.0.0.0 --port 8000 --workers 1 &\n\
        API_PID=$!\n\
    fi\n\
    \n\
    if ! kill -0 $OLLAMA_PID 2>/dev/null; then\n\
        echo "❌ Ollama process died, restarting..."\n\
        ollama serve &\n\
        OLLAMA_PID=$!\n\
    fi\n\
    \n\
    sleep 30\n\
done' > /home/cortex/app/start.sh

RUN chmod +x /home/cortex/app/start.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8501/_stcore/health && curl -f http://localhost:8000/health

CMD ["/home/cortex/app/start.sh"]
